{
  "openapi": "3.0.0",
  "info": {
    "title": "Magacare",
    "description": "API para controle de lista de desejos de ecommerce.",
    "termsOfService": "www.google.com.br",
    "contacts": {
      "email": "email@email.com"
    },
    "version": "1.0.0"
  },
  "servers": [{
    "url": "https://localhost:3000/api/health/ping",
    "description": "API teste"
  }],
  "tags": [
    {
      "name": "Clients",
      "description": "Routes of clients module."
    }
  ],
  "paths": {
    "/clients": {
      "post": {
        "tags": [
          "Clients"
        ],
        "summary": "Create new client",
        "description": "Route responsable to create new clients.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Cadastro de cliente"
              },
              "example": {
                "Clients": {
                  "value": {
                    "fullname": "Malu Campos",
                    "email": "marialuisa@email.com.br",
                    "birthdate": "16/01/2001",
                    "cpf": "12345678901",
                    "phonenumber": "81998929985",
                    "postalcode": "50070123",
                    "gender": "Mulher Cis",
                    "password": "testeteste123"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Client created."
          },
          "400": {
            "description": "The email or the CPF is already in use."
          },
          "500": {
            "description": "Error."
          }
        }
      }
    },
    "/clients/{id}": {
      "put": {
        "tags": [
          "Clients"
        ],
        "summary": "Update client",
        "description": "Route that updates clients and it is not possible to update with an Email or with an CPF that already exists.",
        "parameters": [{
          "in": "path",
          "name": "id",
          "type": "string",
          "required": "true",
          "description": "Client's id to update."
        }],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Update client"
              },
              "example": {
                "Clients": {
                  "value": {
                    "fullname": "Maria Luisa Campos",
                    "email": "marialuisa@email.com.br",
                    "birthdate": "16/01/2001",
                    "cpf": "12345678901",
                    "phonenumber": "81998929985",
                    "postalcode": "50070123",
                    "gender": "Mulher Cis",
                    "oldPassword": "teste123",
                    "password": "testeteste123",
                    "confirmPassword": "testeteste123"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Client updated."
          },
          "400": {
            "description": "The email or the CPF is already in use."
          },
          "401": {
            "description": "Some information is wrong."
          },
          "404": {
            "description": "Error."
          }
        }
      },
      "delete": {
        "tags": ["Clients"],
        "summary": "Delete clients by ID.",
        "description": "Route responsible to delete clients. If the client has a wishlist, it's also deleted.",
        "parameters": [{
          "in": "path",
          "name": "id",
          "type": "string",
          "required": "true",
          "description": "Client's id to delete."
        }],
        "responses": {
          "200": {
            "description": "Client deleted."
          },
          "404": {
            "description": "Error."
          }
        }
      }
    },
    "clients/wishlists/{id}": {
      "get": {
        "tags": [
          "Clients"
        ],
        "summary": "Search client's wishlists.",
        "description": "Route responsible to search the client's wishlists by his id.",
        "parameters": [{
          "in": "path",
          "name": "id",
          "type": "string",
          "required": "true",
          "description": "Client's id to search wishlists"
        }],
        "responses": {
          "200": {
            "description": "OK."
          },
          "404": {
            "description": "Error."
          }
        }
      }
    },
    "clients/id/{id}": {
      "get": {
        "tags": [
          "Clients"
        ],
        "summary": "Search client by ID.",
        "description": "Route responsable to search client by his ID.",
        "responses": {
          "200": {
            "description": "OK.",
            "schema": {
              "$ref":"#/components/schemas/Create client",
              "example": {
                "Clients": {
                  "value": {
                    "fullname": "Maria Luisa Campos",
                    "email": "marialuisa@email.com.br",
                    "birthdate": "16/01/2001",
                    "cpf": "12345678901",
                    "phonenumber": "81998929985",
                    "postalcode": "50070123",
                    "gender": "Mulher Cis",
                    "password": "testeteste123"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Error."
          }
        }
      }
    },
    "clients/email": {
      "get": {
        "tags": ["Clients"],
        "summary": "Search clients by email",
        "description": "Route that search clients by his email by query params.",
        "parameters": [{
          "in": "query",
          "name": "email",
          "type": "string",
          "required": "true",
          "description": "Client's email to get his informations. "
        }]
      }
    },
    "clients/search": {
      "get": {
        "tags": [
          "Clients"
        ],
        "summary": "Search client with filter and pagination.",
        "description": "Route responsable to search client by filter (name, id or gender) and pagination, where you can choose the page and the limit of clients in each page.",
        "parameters": [
          {
            "in": "query",
            "name": "searchBy",
            "type": "string",
            "required": "true",
            "description": "Decides the type of filter you want to use. It can be the client's id, name or gender."
          },
          {
            "in": "query",
            "name": "filter",
            "type": "string",
            "required": "true",
            "description": "Filter used to search the client."
          },
          {
            "in": "query",
            "name": "page",
            "type": "integer",
            "required": "false",
            "description": "Search's page. The default page is 1."
          },
          {
            "in": "query",
            "name": "limit",
            "type": "integer",
            "required": "false",
            "description": "How many clients showing in each page. The default quantity is 5."
          }
        ],
        "responses": {
          "200": {
            "description": "OK."
          },
          "404": {
            "description": "Error."
          }
        }
      }
    },

    "/products": {
      "post": {
        "tags": [
          "Products"
        ],
        "summary": "Create new product",
        "description": "Route responsible to create new products.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Cadastro de produto"
              },
              "example": {
                "Products": {
                  "value": {
                    "code": "549595295949",
                    "name": "√Ågua Micelar",
                    "description": "Limpeza da pele de forma delicada",
                    "volume": "150 ml",
                    "recommendation": "todos os tipos de pele"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Product registered."
          },
          "400": {
            "description": "This name/code already exists."
          },
          "404": {
            "description": "Not found."
          }
        }
      }
    },
    "/products/{code}": {
      "put": {
        "tags": [
          "Products"
        ],
        "summary": "Update product",
        "description": "Route that updates products and it is not possible to update if the name already exists.",
        "parameters": [{
          "in": "path",
          "name": "code",
          "type": "string",
          "required": "true",
          "description": "Product update."
        }],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Update product"
              },
              "example": {
                "products": {
                  "value": {
                    "code": "549595295949",
                    "name": "Hidratante Karite",
                    "description": "Hidratante facial com manteiga de Karite",
                    "volume": "120 ml",
                    "recommendation": "pele seca"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Product updated."
          },
          "400": {
            "description": "This name already exists."
          },          
          "404": {
            "description": "Not found"
          }
        }
      },
      "delete": {
        "tags": ["Products"],
        "summary": "Delete products by code.",
        "description": "Route responsable to delete products. Product cannot be deleted if it's on a wishlist.",
        "parameters": [{
          "in": "path",
          "name": "code",
          "type": "string",
          "required": "true",
          "description": "Product's code to delete."
        }],
        "responses": {
          "200": {
            "description": "Product deleted."
          },
          "401": {
            "description": "Product cannot be deleted as it is on a wish list."
          },
          "404": {
            "description": "Not found."
          }
        }
      }
    },
    "products/wishlists/{code}": {
      "get": {
        "tags": [
          "Products"
        ],
        "summary": "Search wishlists by product code.",
        "description": "Route responsible to search wishlists by product code.",
        "parameters": [{
          "in": "path",
          "name": "code",
          "type": "string",
          "required": "true",
          "description": "Product's code to search wishlists"
        }],
        "responses": {
          "200": {
            "description": "OK."
          },
          "400": {
            "description": "No product found."
          },
          "404": {
            "description": "Error finding product."
          }
        }
      }
    },
    "products/code/{code}": {
      "get": {
        "tags": [
          "Products"
        ],
        "summary": "Search product by code.",
        "description": "Route responsible to search a product by code.",
        "responses": {
          "200": {
            "description": "OK.",
            "schema": {
              "$ref":"#/components/schemas/Create product",
              "example": {
                "Products": {
                  "value": {
                    "code": "549595295949",
                    "name": "√Ågua Micelar",
                    "description": "Limpeza da pele de forma delicada",
                    "volume": "150 ml",
                    "recommendation": "todos os tipos de pele"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Error."
          }
        }
      }
    },
    "products/search": {
      "get": {
        "tags": [
          "Products"
        ],
        "summary": "Search client with filter and pagination.",
        "description": "Route responsible to search product by filter and pagination, where you can choose the page and the limit of products in each page.",
        "parameters": [
          {
            "in": "query",
            "name": "searchBy",
            "type": "string",
            "required": "true",
            "description": "Decides the type of filter you want to use. It can be the product's name, code or recommendation."
          },
          {
            "in": "query",
            "name": "filter",
            "type": "string",
            "required": "true",
            "description": "Filter used to search the product."
          },
          {
            "in": "query",
            "name": "page",
            "type": "integer",
            "required": "false",
            "description": "Search's page. The default page is 1."
          },
          {
            "in": "query",
            "name": "limit",
            "type": "integer",
            "required": "false",
            "description": "How many products showing in each page. The default quantity is 5."
          }
        ],
        "responses": {
          "200": {
            "description": "OK."
          },
          "404": {
            "description": "Error."
          }
        }
      }
    },

    "/wishlists": {
      "post": {
        "tags": [
          "Wishlists"
        ],
        "summary": "Create new wishlist",
        "description": "Route responsible to create new wishlists.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Cadastro de wishlists"
              },
              "example": {
                "Wishlists": {
                  "value": {
                    "title": "Lista de Natal",
                    "client": "628e97add291a4d768eb119e",
                    "product": "549595295949",
                    "createdAt": "2022-05-25T23:53:01.428Z"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Wishlist registered."
          },
          "400": {
            "description": "Bad request: change your requisition before repeating."
          },
          "404": {
            "description": "Not found."
          }
        }
      }
    },
    "/wishlists/{id}": {
      "put": {
        "tags": [ "Wishlists" ],
        "summary": "Update wishlist",
        "description": "Route that updates wishlists, but it can't be empty, have duplicate products or change client.",
        "parameters": [{
          "in": "path",
          "name": "id",
          "type": "string",
          "required": "true",
          "description": "Wishlist update."
        }],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Update wishlist"
              },
              "example": {
                "Wishlists": {
                  "value": {
                    "title": "Lista de Pascoa",
                    "client": "628e97add291a4d768eb119e",
                    "product": "549595295949",
                    "createdAt": "2022-05-25T23:53:01.428Z"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Wishlist updated."
          },
          "400": {
            "description": "Bad request: change your requisition before repeating."
          },          
          "404": {
            "description": "Not found"
          }
        }
      },
      "delete": {
        "tags": ["Wishlists"],
        "summary": "Delete wishlists by id.",
        "description": "Route responsible to delete wishlists.",
        "parameters": [{
          "in": "path",
          "name": "id",
          "type": "string",
          "required": "true",
          "description": "Wishlist's id to delete."
        }],
        "responses": {
          "200": {
            "description": "Wishlist deleted."
          },
          "404": {
            "description": "Not found."
          }
        }
      }
    }



    },
  


  "components": {
    "schemas": {
      "Create client": {
        "type": "object",
        "properties": {
          "fullname": {
            "type": "string",
            "required": "true"
          },
          "email": {
            "type": "string",
            "required": "true",
            "lowercase": "true",
            "unique": "true"
          },
          "birthdate": {
            "type": "date",
            "required": "true"
          },
          "cpf": {
            "type": "string",
            "required": "true",
            "unique": "true"
          },
          "phonenumber": {
            "type": "string",
            "required": "true"
          },
          "postalcode": {
            "type": "string",
            "required": "true"
          },
          "gender": {
            "type": "string",
            "default": "prefiro n√£o responder",
            "required": "true"
          },
          "password": {
            "type": "string",
            "required": "true"
          }
        }
      },
      "Update client": {
        "type": "object",
        "properties": {
          "fullname": {
            "type": "string"
          },
          "email": {
            "type": "string",
            "lowercase": "true"
          },
          "birthdate": {
            "type": "date"
          },
          "cpf": {
            "type": "string"
          },
          "phonenumber": {
            "type": "string"
          },
          "postalcode": {
            "type": "string"
          },
          "gender": {
            "type": "string"
          },
          "oldPassword": {
            "type": "string"
          },
          "password": {
            "type": "string"
          },
          "confirmPassword": {
            "type": "string"
          }
        }
      }
    }

  }
}

